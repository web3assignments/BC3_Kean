import { SolcOutput } from './solc-api';
import { Version } from './version';
import { StorageLayout } from './storage';
import { LinkReference } from './link-refs';
import { UpgradesError } from './error';
import { SrcDecoder } from './src-decoder';
export declare type ValidationLog = RunValidation[];
export declare type RunValidation = Record<string, ContractValidation>;
declare type Validations = ValidationLog | RunValidation;
export declare type Validation = RunValidation;
export declare type ValidationResult = ContractValidation;
export interface ContractValidation {
    version?: Version;
    inherit: string[];
    libraries: string[];
    linkReferences: LinkReference[];
    errors: ValidationError[];
    layout: StorageLayout;
}
declare type ValidationError = ValidationErrorConstructor | ValidationErrorOpcode | ValidationErrorWithName;
interface ValidationErrorBase {
    src: string;
}
interface ValidationErrorWithName extends ValidationErrorBase {
    name: string;
    kind: 'state-variable-assignment' | 'state-variable-immutable' | 'external-library-linking' | 'struct-definition' | 'enum-definition';
}
interface ValidationErrorConstructor extends ValidationErrorBase {
    kind: 'constructor';
    contract: string;
}
interface ValidationErrorOpcode extends ValidationErrorBase {
    kind: 'delegatecall' | 'selfdestruct';
}
export interface ValidationOptions {
    unsafeAllowCustomTypes?: boolean;
    unsafeAllowLinkedLibraries?: boolean;
}
export declare function withValidationDefaults(opts: ValidationOptions): Required<ValidationOptions>;
export declare function validate(solcOutput: SolcOutput, decodeSrc: SrcDecoder): RunValidation;
export declare function getContractVersion(validation: RunValidation, contractName: string): Version;
export declare function getContractNameAndRunValidation(validations: Validations, version: Version): [string, RunValidation];
export declare function getStorageLayout(validations: Validations, version: Version): StorageLayout;
export declare function getUnlinkedBytecode(validations: Validations, bytecode: string): string;
export declare function assertUpgradeSafe(validations: Validations, version: Version, opts: ValidationOptions): void;
export declare class ValidationErrors extends UpgradesError {
    readonly errors: ValidationError[];
    constructor(contractName: string, errors: ValidationError[]);
}
export declare function getErrors(validations: Validations, version: Version): ValidationError[];
export declare function isUpgradeSafe(validations: Validations, version: Version): boolean;
export declare function silenceWarnings(): void;
export {};
//# sourceMappingURL=validate.d.ts.map